/**
 *   SqrtPolynomial
 *
 *   copyright 2003, 2013 Kevin Lindsey
 */
"use strict";

let Polynomial;

if (typeof module !== "undefined") {
    Polynomial = require("./Polynomial");
}

/**
 *   class variables
 */
SqrtPolynomial.VERSION = 1.0;

// setup inheritance
SqrtPolynomial.prototype = new Polynomial();
SqrtPolynomial.prototype.constructor = SqrtPolynomial;
SqrtPolynomial.superclass = Polynomial.prototype;


/**
 *  SqrtPolynomial
 *
 *  @class
 *  @param {Array<Object>} args
 */
function SqrtPolynomial(...args) {
    this.init(args);
}


/**
 *  eval
 *
 *  @param {number} x
 *  @returns {number}
 */
SqrtPolynomial.prototype.eval = function(x) {
    const TOLERANCE = 1e-7;
    let result = SqrtPolynomial.superclass.eval.call(this, x);

    // NOTE: May need to change the following.  I added these to capture
    // some really small negative values that were being generated by one
    // of my Bezier arcLength functions
    if (Math.abs(result) < TOLERANCE) {
        result = 0;
    }

    if (result < 0) {
        throw new Error("SqrtPolynomial.eval: cannot take square root of negative number");
    }

    return Math.sqrt(result);
};

/**
 *  toString
 *
 *  @returns {string}
 */
SqrtPolynomial.prototype.toString = function() {
    const result = SqrtPolynomial.superclass.toString.call(this);

    return "sqrt(" + result + ")";
};

if (typeof module !== "undefined") {
    module.exports = SqrtPolynomial;
}
